// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: coin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteServiceClient is the client API for UpvoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteServiceClient interface {
	ListCoins(ctx context.Context, in *ListCoinsRequest, opts ...grpc.CallOption) (UpvoteService_ListCoinsClient, error)
	GetCoinByName(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	CreateCoin(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	UpdateCoin(ctx context.Context, in *UpdateCoinRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	RemoveCoin(ctx context.Context, in *CoinIdRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	UpVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	DownVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	RemoveUpVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
	RemoveDownvote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error)
}

type upvoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteServiceClient(cc grpc.ClientConnInterface) UpvoteServiceClient {
	return &upvoteServiceClient{cc}
}

func (c *upvoteServiceClient) ListCoins(ctx context.Context, in *ListCoinsRequest, opts ...grpc.CallOption) (UpvoteService_ListCoinsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpvoteService_ServiceDesc.Streams[0], "/pb.UpvoteService/ListCoins", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteServiceListCoinsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpvoteService_ListCoinsClient interface {
	Recv() (*CoinsResponse, error)
	grpc.ClientStream
}

type upvoteServiceListCoinsClient struct {
	grpc.ClientStream
}

func (x *upvoteServiceListCoinsClient) Recv() (*CoinsResponse, error) {
	m := new(CoinsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upvoteServiceClient) GetCoinByName(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/GetCoinByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) CreateCoin(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/CreateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) UpdateCoin(ctx context.Context, in *UpdateCoinRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/UpdateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) RemoveCoin(ctx context.Context, in *CoinIdRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/RemoveCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) UpVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/UpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) DownVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/DownVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) RemoveUpVote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/RemoveUpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upvoteServiceClient) RemoveDownvote(ctx context.Context, in *CoinNameRequest, opts ...grpc.CallOption) (*CoinResponse, error) {
	out := new(CoinResponse)
	err := c.cc.Invoke(ctx, "/pb.UpvoteService/RemoveDownvote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpvoteServiceServer is the server API for UpvoteService service.
// All implementations must embed UnimplementedUpvoteServiceServer
// for forward compatibility
type UpvoteServiceServer interface {
	ListCoins(*ListCoinsRequest, UpvoteService_ListCoinsServer) error
	GetCoinByName(context.Context, *CoinNameRequest) (*CoinResponse, error)
	CreateCoin(context.Context, *CoinNameRequest) (*CoinResponse, error)
	UpdateCoin(context.Context, *UpdateCoinRequest) (*CoinResponse, error)
	RemoveCoin(context.Context, *CoinIdRequest) (*CoinResponse, error)
	UpVote(context.Context, *CoinNameRequest) (*CoinResponse, error)
	DownVote(context.Context, *CoinNameRequest) (*CoinResponse, error)
	RemoveUpVote(context.Context, *CoinNameRequest) (*CoinResponse, error)
	RemoveDownvote(context.Context, *CoinNameRequest) (*CoinResponse, error)
	mustEmbedUnimplementedUpvoteServiceServer()
}

// UnimplementedUpvoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteServiceServer struct {
}

func (UnimplementedUpvoteServiceServer) ListCoins(*ListCoinsRequest, UpvoteService_ListCoinsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCoins not implemented")
}
func (UnimplementedUpvoteServiceServer) GetCoinByName(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinByName not implemented")
}
func (UnimplementedUpvoteServiceServer) CreateCoin(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoin not implemented")
}
func (UnimplementedUpvoteServiceServer) UpdateCoin(context.Context, *UpdateCoinRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoin not implemented")
}
func (UnimplementedUpvoteServiceServer) RemoveCoin(context.Context, *CoinIdRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCoin not implemented")
}
func (UnimplementedUpvoteServiceServer) UpVote(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVote not implemented")
}
func (UnimplementedUpvoteServiceServer) DownVote(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVote not implemented")
}
func (UnimplementedUpvoteServiceServer) RemoveUpVote(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUpVote not implemented")
}
func (UnimplementedUpvoteServiceServer) RemoveDownvote(context.Context, *CoinNameRequest) (*CoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDownvote not implemented")
}
func (UnimplementedUpvoteServiceServer) mustEmbedUnimplementedUpvoteServiceServer() {}

// UnsafeUpvoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServiceServer will
// result in compilation errors.
type UnsafeUpvoteServiceServer interface {
	mustEmbedUnimplementedUpvoteServiceServer()
}

func RegisterUpvoteServiceServer(s grpc.ServiceRegistrar, srv UpvoteServiceServer) {
	s.RegisterService(&UpvoteService_ServiceDesc, srv)
}

func _UpvoteService_ListCoins_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCoinsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpvoteServiceServer).ListCoins(m, &upvoteServiceListCoinsServer{stream})
}

type UpvoteService_ListCoinsServer interface {
	Send(*CoinsResponse) error
	grpc.ServerStream
}

type upvoteServiceListCoinsServer struct {
	grpc.ServerStream
}

func (x *upvoteServiceListCoinsServer) Send(m *CoinsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpvoteService_GetCoinByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).GetCoinByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/GetCoinByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).GetCoinByName(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_CreateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).CreateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/CreateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).CreateCoin(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_UpdateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).UpdateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/UpdateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).UpdateCoin(ctx, req.(*UpdateCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_RemoveCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).RemoveCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/RemoveCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).RemoveCoin(ctx, req.(*CoinIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_UpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).UpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/UpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).UpVote(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_DownVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).DownVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/DownVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).DownVote(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_RemoveUpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).RemoveUpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/RemoveUpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).RemoveUpVote(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpvoteService_RemoveDownvote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpvoteServiceServer).RemoveDownvote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UpvoteService/RemoveDownvote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpvoteServiceServer).RemoveDownvote(ctx, req.(*CoinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpvoteService_ServiceDesc is the grpc.ServiceDesc for UpvoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UpvoteService",
	HandlerType: (*UpvoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoinByName",
			Handler:    _UpvoteService_GetCoinByName_Handler,
		},
		{
			MethodName: "CreateCoin",
			Handler:    _UpvoteService_CreateCoin_Handler,
		},
		{
			MethodName: "UpdateCoin",
			Handler:    _UpvoteService_UpdateCoin_Handler,
		},
		{
			MethodName: "RemoveCoin",
			Handler:    _UpvoteService_RemoveCoin_Handler,
		},
		{
			MethodName: "UpVote",
			Handler:    _UpvoteService_UpVote_Handler,
		},
		{
			MethodName: "DownVote",
			Handler:    _UpvoteService_DownVote_Handler,
		},
		{
			MethodName: "RemoveUpVote",
			Handler:    _UpvoteService_RemoveUpVote_Handler,
		},
		{
			MethodName: "RemoveDownvote",
			Handler:    _UpvoteService_RemoveDownvote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCoins",
			Handler:       _UpvoteService_ListCoins_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coin.proto",
}
