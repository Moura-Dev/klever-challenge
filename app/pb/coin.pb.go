// The Technical Challenge consists of creating an API with Golang using
// gRPC with stream pipes that exposes an Upvote service endpoints.
//  The API will provide the user an interface to upvote or downvote a
// known list of the main Cryptocurrencies (Bitcoin, ethereum, litecoin, etc..).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: coin.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CoinName   string `protobuf:"bytes,2,opt,name=coin_name,json=coinName,proto3" json:"coin_name,omitempty"`
	UpVotes    int64  `protobuf:"varint,3,opt,name=up_votes,json=upVotes,proto3" json:"up_votes,omitempty"`
	DownVotes  int64  `protobuf:"varint,4,opt,name=down_votes,json=downVotes,proto3" json:"down_votes,omitempty"`
	TotalVotes int64  `protobuf:"varint,5,opt,name=total_votes,json=totalVotes,proto3" json:"total_votes,omitempty"`
	CreatedAt  string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CoinData) Reset() {
	*x = CoinData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinData) ProtoMessage() {}

func (x *CoinData) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinData.ProtoReflect.Descriptor instead.
func (*CoinData) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{0}
}

func (x *CoinData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinData) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *CoinData) GetUpVotes() int64 {
	if x != nil {
		return x.UpVotes
	}
	return 0
}

func (x *CoinData) GetDownVotes() int64 {
	if x != nil {
		return x.DownVotes
	}
	return 0
}

func (x *CoinData) GetTotalVotes() int64 {
	if x != nil {
		return x.TotalVotes
	}
	return 0
}

func (x *CoinData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CoinData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type ListCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCoinsRequest) Reset() {
	*x = ListCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCoinsRequest) ProtoMessage() {}

func (x *ListCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCoinsRequest.ProtoReflect.Descriptor instead.
func (*ListCoinsRequest) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{1}
}

type CoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CoinData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CoinsResponse) Reset() {
	*x = CoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinsResponse) ProtoMessage() {}

func (x *CoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinsResponse.ProtoReflect.Descriptor instead.
func (*CoinsResponse) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{2}
}

func (x *CoinsResponse) GetData() *CoinData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CoinIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CoinIdRequest) Reset() {
	*x = CoinIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinIdRequest) ProtoMessage() {}

func (x *CoinIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinIdRequest.ProtoReflect.Descriptor instead.
func (*CoinIdRequest) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CoinIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CoinNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinName string `protobuf:"bytes,1,opt,name=coin_name,json=coinName,proto3" json:"coin_name,omitempty"`
}

func (x *CoinNameRequest) Reset() {
	*x = CoinNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinNameRequest) ProtoMessage() {}

func (x *CoinNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinNameRequest.ProtoReflect.Descriptor instead.
func (*CoinNameRequest) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CoinNameRequest) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

type CoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CoinName   string `protobuf:"bytes,2,opt,name=coin_name,json=coinName,proto3" json:"coin_name,omitempty"`
	UpVotes    int64  `protobuf:"varint,3,opt,name=up_votes,json=upVotes,proto3" json:"up_votes,omitempty"`
	DownVotes  int64  `protobuf:"varint,4,opt,name=down_votes,json=downVotes,proto3" json:"down_votes,omitempty"`
	TotalVotes int64  `protobuf:"varint,5,opt,name=total_votes,json=totalVotes,proto3" json:"total_votes,omitempty"`
	CreatedAt  string `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  string `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CoinResponse) Reset() {
	*x = CoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinResponse) ProtoMessage() {}

func (x *CoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinResponse.ProtoReflect.Descriptor instead.
func (*CoinResponse) Descriptor() ([]byte, []int) {
	return file_coin_proto_rawDescGZIP(), []int{5}
}

func (x *CoinResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoinResponse) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *CoinResponse) GetUpVotes() int64 {
	if x != nil {
		return x.UpVotes
	}
	return 0
}

func (x *CoinResponse) GetDownVotes() int64 {
	if x != nil {
		return x.DownVotes
	}
	return 0
}

func (x *CoinResponse) GetTotalVotes() int64 {
	if x != nil {
		return x.TotalVotes
	}
	return 0
}

func (x *CoinResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CoinResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_coin_proto protoreflect.FileDescriptor

var file_coin_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x22, 0xd0, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0d, 0x43, 0x6f,
	0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x0f, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x32, 0xf8, 0x03, 0x0a, 0x0d, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x06, 0x55, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x44, 0x6f,
	0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a,
	0x06, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_coin_proto_rawDescOnce sync.Once
	file_coin_proto_rawDescData = file_coin_proto_rawDesc
)

func file_coin_proto_rawDescGZIP() []byte {
	file_coin_proto_rawDescOnce.Do(func() {
		file_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_coin_proto_rawDescData)
	})
	return file_coin_proto_rawDescData
}

var file_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_coin_proto_goTypes = []interface{}{
	(*CoinData)(nil),         // 0: pb.CoinData
	(*ListCoinsRequest)(nil), // 1: pb.ListCoinsRequest
	(*CoinsResponse)(nil),    // 2: pb.CoinsResponse
	(*CoinIdRequest)(nil),    // 3: pb.CoinIdRequest
	(*CoinNameRequest)(nil),  // 4: pb.CoinNameRequest
	(*CoinResponse)(nil),     // 5: pb.CoinResponse
}
var file_coin_proto_depIdxs = []int32{
	0,  // 0: pb.CoinsResponse.data:type_name -> pb.CoinData
	1,  // 1: pb.UpvoteService.ListCoins:input_type -> pb.ListCoinsRequest
	4,  // 2: pb.UpvoteService.GetCoinByName:input_type -> pb.CoinNameRequest
	4,  // 3: pb.UpvoteService.CreateCoin:input_type -> pb.CoinNameRequest
	3,  // 4: pb.UpvoteService.UpdateCoin:input_type -> pb.CoinIdRequest
	3,  // 5: pb.UpvoteService.RemoveCoin:input_type -> pb.CoinIdRequest
	3,  // 6: pb.UpvoteService.Upvote:input_type -> pb.CoinIdRequest
	3,  // 7: pb.UpvoteService.DownVote:input_type -> pb.CoinIdRequest
	3,  // 8: pb.UpvoteService.RemoveUpvote:input_type -> pb.CoinIdRequest
	3,  // 9: pb.UpvoteService.RemoveDownvote:input_type -> pb.CoinIdRequest
	2,  // 10: pb.UpvoteService.ListCoins:output_type -> pb.CoinsResponse
	5,  // 11: pb.UpvoteService.GetCoinByName:output_type -> pb.CoinResponse
	5,  // 12: pb.UpvoteService.CreateCoin:output_type -> pb.CoinResponse
	5,  // 13: pb.UpvoteService.UpdateCoin:output_type -> pb.CoinResponse
	5,  // 14: pb.UpvoteService.RemoveCoin:output_type -> pb.CoinResponse
	5,  // 15: pb.UpvoteService.Upvote:output_type -> pb.CoinResponse
	5,  // 16: pb.UpvoteService.DownVote:output_type -> pb.CoinResponse
	5,  // 17: pb.UpvoteService.RemoveUpvote:output_type -> pb.CoinResponse
	5,  // 18: pb.UpvoteService.RemoveDownvote:output_type -> pb.CoinResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_coin_proto_init() }
func file_coin_proto_init() {
	if File_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coin_proto_goTypes,
		DependencyIndexes: file_coin_proto_depIdxs,
		MessageInfos:      file_coin_proto_msgTypes,
	}.Build()
	File_coin_proto = out.File
	file_coin_proto_rawDesc = nil
	file_coin_proto_goTypes = nil
	file_coin_proto_depIdxs = nil
}
